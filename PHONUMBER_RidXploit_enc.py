# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = "RidXploit_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_RidXploit"
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
